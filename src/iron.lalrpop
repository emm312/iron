use std::str::FromStr;
use crate::frontend::nodes::*;

grammar;

pub Iron: Vec<Node> = {
    FuncDef* => <>
}

Statement: Node = {
    ExprNode,
    VariableDef,
    IfStatement,
    WhileStatement,
    // ForLoopStatement
}

Block: Vec<Node> = {
    Statement*
}

NonBoxedExpr: Expr = {
    FullExpr => *<>
}

ExprNode: Node = {
    <expr: FullExpr> ";" => Node::ExprNode(*expr)
}

FullExpr: Box<Expr> = {
    FuncCall,
    Expr,
    Comparison
}

Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::BiOpNode(<>)),
    Factor
}

Comparison: Box<Expr> = {
    Expr ComparisonOp Expr => Box::new(Expr::ComparisonNode(<>)),
}

ComparisonOp: Comparison = {
    "==" => Comparison::Eq,
    "!=" => Comparison::Neq,
    ">" => Comparison::Gt,
    "<" => Comparison::Lt,
    ">=" => Comparison::Gte,
    "<=" => Comparison::Lte
}

ExprOp: Operation = {
    "+" => Operation::Add,
    "-" => Operation::Sub
}

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::BiOpNode(<>)),
    Term
}

FactorOp: Operation = {
    "*" => Operation::Mul,
    "/" => Operation::Div,
    "%" => Operation::Mod
}

Term: Box<Expr> = {
    Num => Box::new(Expr::Num(<>)),
    ident => Box::new(Expr::Ident(<>)),
    "(" <Expr> ")"
}

Type: Types = {
    "i8" => Types::I8,
    "i16" => Types::I16,
    "i32" => Types::I32,
    "i64" => Types::I64,
    "u8" => Types::U8,
    "u16" => Types::U16,
    "u32" => Types::U32,
    "u64" => Types::U64,
    "String" => Types::STRING,
    "Infer" => Types::Infer
}

FuncDef: Node = {
    "func" <name:ident>  <args:FuncArgs>  "->" <typ:Type> "{" <block:Block> "}" => Node::FuncDefNode(name, args, typ, block)
}

FuncArgs: Vec<(String, Types)> = {
    "(" <mut params: (<ident> ":" <Type> ",")*> <last: (<ident> ":" <Type>)?> ")" => {
        params.extend(last.clone());
        params
    }, 
}

FuncCallArgs: Vec<Expr> = {
    "(" <mut params: (<NonBoxedExpr> ",")*> <last: (<NonBoxedExpr>)?> ")" => {
        params.extend(last.clone());
        params
    }, 
}

FuncCall: Box<Expr> = {
    <name:ident> <args:FuncCallArgs> => Box::new(Expr::FuncCall(name, args))
}

VariableDef: Node = {
    "let" <name: ident> ":" <typ: Type> "=" <expr: FullExpr> ";" => Node::VarDefNode(name, typ, expr)
}

IfStatement: Node = {
    "if" <expr: NonBoxedExpr> "{" <block: Block> "}" => Node::IfNode(expr, block)
}

WhileStatement: Node = {
    "while" <expr: NonBoxedExpr> "{" <block: Block> "}" => Node::WhileNode(expr, block)
}

// ForLoopStatement: Node = {
//     "for" <start: Statement> ";" <expr: NonBoxedExpr> ";" <end: Statement> ";" "{" <block: Block> "}" => Node::ForLoopNode(Box::new(start), expr, Box::new(end), block)
// }

Num: i64 = r"[0-9]+" => i64::from_str(<>).unwrap();
ident: String = r"[a-zA-Z][a-zA-Z0-9_-]*" => <>.to_string();